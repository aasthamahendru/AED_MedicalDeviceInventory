/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.WarehouseManager;

import Business.Employee.WarehouseManager;
import Business.Enterprise.Enterprise;
import Business.Enterprise.EnterpriseDirectory;
import Business.Enterprise.InventoryEnterprise;
import Business.Enterprise.SupplierEnterprise;
import Business.Inventory.IDevice;
import Business.Inventory.IDeviceType;
import Business.Inventory.WarehouseDirectory;
import Business.Network.Network;
import Business.Order.Order;
import Business.Organization.InventoryOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aastha
 */
public class CheckInventoryJPanel extends javax.swing.JPanel {

    JPanel upc;
    Network network;
    SupplierEnterprise supplierEnt;
    WarehouseDirectory wd;
    Order order;
    UserAccount managerAccount;
    WarehouseManager manager;
    InventoryEnterprise iEnt;
    InventoryOrganization iOrg;
    ArrayList<IDeviceType> typeOfDevicesInInventory;

    /**
     * Creates new form CheckInventoryJPanel
     */
    public CheckInventoryJPanel(JPanel upc, Network network, WarehouseManager manager, UserAccount managerAccount) {
        initComponents();
        this.upc = upc;
        this.network = network;
        this.managerAccount = managerAccount;
        this.manager = manager;
        typeOfDevicesInInventory = new ArrayList<>();
        EnterpriseDirectory ed = network.getEnterpriseDirectory();
        for (Enterprise e : ed.getEnterpriseList()) {
            if (e instanceof InventoryEnterprise) {
                iEnt = (InventoryEnterprise) e;
                break;
            }
        }
        for (Organization org : iEnt.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof InventoryOrganization) {
                iOrg = (InventoryOrganization) org;
            }
        }

        populateComboBox();
    }

    public void populateComboBox() {

        for (IDevice device : manager.getWarehouse().getListOfDevices().getDeviceList()) {
            IDeviceType idt = device.getDeviceDetails();
            typeOfDevicesInInventory.add(idt);
        }

        Collections.sort(typeOfDevicesInInventory);

        IDeviceType e = new IDeviceType();
        e.setTypeOfDevice("bogus");
        e.setModelNumber(-1);
        e.setDeviceDescription("bogus");
        typeOfDevicesInInventory.add(e);
        ArrayList<IDeviceType> temp = new ArrayList<>();
        int i;
        for (i = 0; i < typeOfDevicesInInventory.size() - 1; i++) {
            if (!typeOfDevicesInInventory.get(i).toString().equals(typeOfDevicesInInventory.get(i + 1).toString())) {
                temp.add(typeOfDevicesInInventory.get(i));
            }
        }
        typeOfDevicesInInventory.clear();
        typeOfDevicesInInventory.addAll(temp);

        for (IDeviceType dt : typeOfDevicesInInventory) {
            typeJComboBox.addItem(dt);
        }

        populateTable((IDeviceType) typeJComboBox.getSelectedItem());
    }

    public void populateTable(IDeviceType idt) {
        DefaultTableModel dtm = (DefaultTableModel) devicesJTable.getModel();
        dtm.setRowCount(0);

        Object[] row = new Object[6];
        for (IDevice device : manager.getWarehouse().getListOfDevices().getDeviceList()) {
            if (device.getDeviceDetails().getTypeOfDevice().equals(idt.getTypeOfDevice())) {
                row[0] = device;
                row[1] = device.getDeviceDetails().getTypeOfDevice();
                row[2] = new SimpleDateFormat("MM-dd-yyyy").format(device.getWarrantyExpiration());
                if (device.isMaintenanceDue() == true && (!device.getMaintenanceDetails().getMaintenanceStatus().equals("Maintenance in progress"))) {
                    device.getMaintenanceDetails().setMaintenanceStatus("Maintenance Due");
                }
                row[3] = device.getMaintenanceDetails().getMaintenanceStatus();
                row[4] = new SimpleDateFormat("MM-dd-yyyy").format(device.getMaintenanceDetails().getMaintenanceDueDate());
                row[5] = device.getDeviceDetails().getS();

                dtm.addRow(row);
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        warehouseNameJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        devicesJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        typeJComboBox = new javax.swing.JComboBox();
        backjButton2 = new javax.swing.JButton();
        viewReservationsJButton = new javax.swing.JButton();
        viewHistoryJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        warehouseNameJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        warehouseNameJLabel.setText("Inventory Devices");
        add(warehouseNameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        devicesJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "InventoryID", "Type", "Warranty Expiration", "Maintenance Status", "Maintenance Due Date", "Supplier"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(devicesJTable);
        if (devicesJTable.getColumnModel().getColumnCount() > 0) {
            devicesJTable.getColumnModel().getColumn(0).setResizable(false);
            devicesJTable.getColumnModel().getColumn(1).setResizable(false);
            devicesJTable.getColumnModel().getColumn(2).setResizable(false);
            devicesJTable.getColumnModel().getColumn(3).setResizable(false);
            devicesJTable.getColumnModel().getColumn(4).setResizable(false);
            devicesJTable.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 950, 193));

        jLabel1.setText("Select Device Type to view:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 43, -1, -1));

        typeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeJComboBoxActionPerformed(evt);
            }
        });
        add(typeJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(192, 40, 200, -1));

        backjButton2.setText("<<Back");
        backjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton2ActionPerformed(evt);
            }
        });
        add(backjButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 510, -1, -1));

        viewReservationsJButton.setText("View Reservations>>");
        viewReservationsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewReservationsJButtonActionPerformed(evt);
            }
        });
        add(viewReservationsJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 570, 177, -1));

        viewHistoryJButton.setText("View Device Maintenance History>>");
        viewHistoryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHistoryJButtonActionPerformed(evt);
            }
        });
        add(viewHistoryJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 300, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void backjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton2ActionPerformed

        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);
    }//GEN-LAST:event_backjButton2ActionPerformed

    private void viewReservationsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewReservationsJButtonActionPerformed
        ReservationsJPanel rjp = new ReservationsJPanel(upc, iOrg, manager);
        upc.add("viewreservations", rjp);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.next(upc);
    }//GEN-LAST:event_viewReservationsJButtonActionPerformed

    private void typeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeJComboBoxActionPerformed
        populateTable((IDeviceType) typeJComboBox.getSelectedItem());
    }//GEN-LAST:event_typeJComboBoxActionPerformed

    private void viewHistoryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHistoryJButtonActionPerformed
        int selectedRow = devicesJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }
        IDevice d = (IDevice) devicesJTable.getValueAt(selectedRow, 0);

        MaintenanceHistoryJPanel mnjp = new MaintenanceHistoryJPanel(upc, d.getMaintenanceDetails());
        upc.add("maintenanceNotes", mnjp);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.next(upc);
    }//GEN-LAST:event_viewHistoryJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backjButton2;
    private javax.swing.JTable devicesJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox typeJComboBox;
    private javax.swing.JButton viewHistoryJButton;
    private javax.swing.JButton viewReservationsJButton;
    private javax.swing.JLabel warehouseNameJLabel;
    // End of variables declaration//GEN-END:variables
}
