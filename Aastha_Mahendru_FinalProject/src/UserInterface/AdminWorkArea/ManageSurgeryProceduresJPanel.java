/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdminWorkArea;

import Business.Enterprise.Enterprise;
import Business.Enterprise.InventoryEnterprise;
import Business.Inventory.IDevice;
import Business.Inventory.IDeviceType;
import Business.Inventory.Warehouse;
import Business.InventoryRecords.SurgeryProcedure;
import Business.InventoryRecords.SurgeryRoom;
import Business.Network.Network;
import Business.Organization.InventoryOrganization;
import Business.Organization.Organization;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Aastha
 */
public class ManageSurgeryProceduresJPanel extends javax.swing.JPanel {

    ArrayList<IDeviceType> typeOfDevicesInInventory;
    ArrayList<String> typeOfDeviceNames;
    ArrayList<JCheckBox> deviceCheckBoxArray;
    ArrayList<IDeviceType> selectedDeviceTypes;
    ArrayList<SurgeryRoom> roomsAvailable;
    ArrayList<SurgeryRoom> selectedRooms;
    ArrayList<JCheckBox> roomCheckBoxArray;
    ArrayList toRemove;
    Network network;
    JPanel upc;

    InventoryOrganization iorg;

    /**
     * Creates new form ManageSurgeryDevicesJPanel
     */
    public ManageSurgeryProceduresJPanel(JPanel upc, Network network) {
        initComponents();
        this.upc = upc;
        this.network = network;
        typeOfDevicesInInventory = new ArrayList<>();
        typeOfDeviceNames = new ArrayList<>();
        deviceCheckBoxArray = new ArrayList<>();
        selectedDeviceTypes = new ArrayList<>();
        roomsAvailable = new ArrayList<>();
        selectedRooms = new ArrayList<>();
        roomCheckBoxArray = new ArrayList<>();
        toRemove = new ArrayList();

        for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (ent instanceof InventoryEnterprise) {
                InventoryEnterprise ient = (InventoryEnterprise) ent;
                for (Organization org : ient.getOrganizationDirectory().getOrganizationList()) {
                    if (org instanceof InventoryOrganization) {
                        iorg = (InventoryOrganization) org;
                    }
                }
            }
        }
        populateTypeOfDevices();
        generateRoomCheckBoxes();

    }

    public void populateTypeOfDevices() {
        for (Warehouse w : iorg.getWarehouseDirectory().getWarehouseList()) {
            for (IDevice device : w.getListOfDevices().getDeviceList()) {
                IDeviceType idt = device.getDeviceDetails();
                typeOfDevicesInInventory.add(idt);
            }
        }
        Collections.sort(typeOfDevicesInInventory);

        IDeviceType e = new IDeviceType();
        e.setTypeOfDevice("bogus");
        e.setModelNumber(-1);
        e.setDeviceDescription("bogus");
        typeOfDevicesInInventory.add(e);
        ArrayList<IDeviceType> temp = new ArrayList<>();
        int i;
        for (i = 0; i < typeOfDevicesInInventory.size() - 1; i++) {
            if (!typeOfDevicesInInventory.get(i).toString().equals(typeOfDevicesInInventory.get(i + 1).toString())) {
                temp.add(typeOfDevicesInInventory.get(i));
            }
        }
        typeOfDevicesInInventory.clear();
        typeOfDevicesInInventory.addAll(temp);

        generateDeviceCheckBoxes();
    }

    public void generateDeviceCheckBoxes() {
        for (IDeviceType dt : typeOfDevicesInInventory) {
            JCheckBox box = new JCheckBox(dt.getTypeOfDevice());
            deviceCheckBoxArray.add(box);
            devicesJPanel.add(box);
            box.setVisible(true);
        }
    }

    public void generateRoomCheckBoxes() {
        for (SurgeryRoom sr : iorg.getSurgeryRoomDirectory().getRoomList()) {
            String str = String.valueOf(sr.getRoomNo()) + "," + sr.getHospital().getHospitalName();
            JCheckBox box = new JCheckBox(str);
            roomCheckBoxArray.add(box);
            roomsJPanel.add(box);
            roomsAvailable.add(sr);
            box.setVisible(true);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jLabel1 = new javax.swing.JLabel();
        surgeryNameJTextField = new javax.swing.JTextField();
        addJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        devicesJPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        roomsJPanel = new javax.swing.JPanel();
        backjButton2 = new javax.swing.JButton();
        viewSurgeriesJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionJTextArea = new javax.swing.JTextArea();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Enter Surgery Procedure Name:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 174, 20));

        surgeryNameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surgeryNameJTextFieldActionPerformed(evt);
            }
        });
        add(surgeryNameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, 160, -1));

        addJButton.setText("Add Surgery Devices & Rooms");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });
        add(addJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 530, 199, -1));

        jLabel2.setText("Select Devices for the surgery:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 160, 20));

        devicesJPanel.setBackground(new java.awt.Color(255, 255, 255));
        devicesJPanel.setLayout(new java.awt.GridBagLayout());
        add(devicesJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 190, 780, 140));

        jLabel3.setText("Select Rooms suitable for this Surgery:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, -1, -1));

        roomsJPanel.setBackground(new java.awt.Color(255, 255, 255));
        roomsJPanel.setLayout(new java.awt.GridBagLayout());
        add(roomsJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 380, 770, 137));

        backjButton2.setText("<<Back");
        backjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton2ActionPerformed(evt);
            }
        });
        add(backjButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 580, -1, -1));

        viewSurgeriesJButton.setText("View Surgery Procedures in Directory>>>");
        viewSurgeriesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSurgeriesJButtonActionPerformed(evt);
            }
        });
        add(viewSurgeriesJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 590, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Define Rooms and Devices for Surgery");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, -1, -1));

        jLabel5.setText("Enter a brief description for the Surgery Procedure:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, -1));

        descriptionJTextArea.setColumns(20);
        descriptionJTextArea.setRows(5);
        jScrollPane1.setViewportView(descriptionJTextArea);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 100, 330, 80));
    }// </editor-fold>//GEN-END:initComponents

    private void surgeryNameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surgeryNameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_surgeryNameJTextFieldActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
        if (!surgeryNameJTextField.getText().equals("") || !descriptionJTextArea.getText().equals("")) {

            String[] splitItem = new String[2];
            for (JCheckBox cbox : deviceCheckBoxArray) {
                if (cbox.isSelected()) {
                    String type = cbox.getText();
                    for (IDeviceType dt : typeOfDevicesInInventory) {
                        if (type.equals(dt.getTypeOfDevice())) {
                            selectedDeviceTypes.add(dt);
                        }
                    }
                }
            }

            for (JCheckBox cbox : roomCheckBoxArray) {
                if (cbox.isSelected()) {
                    String item = cbox.getText();
                    splitItem = item.split(",");
                    for (SurgeryRoom sr : roomsAvailable) {
                        if (splitItem[0].equals(String.valueOf(sr.getRoomNo())) && splitItem[1].equals(sr.getHospital().getHospitalName())) {
                            selectedRooms.add(sr);
                        }
                    }
                }
            }

            if (!selectedDeviceTypes.isEmpty() || !selectedRooms.isEmpty()) {
                boolean isPresent = false;
                for (SurgeryProcedure s : iorg.getSurgeryProcedureDirectory().getListOfSurgeries()) {
                    if (s.getName().equals(surgeryNameJTextField.getText())) {
                        isPresent = true;
                        break;
                    }
                }
                if (isPresent == false) {
                    SurgeryProcedure surgeryProcedure = new SurgeryProcedure();
                    surgeryProcedure.setDevicesUsed(selectedDeviceTypes);
                    surgeryProcedure.setRoomListForThisSurgery(selectedRooms);
                    surgeryProcedure.setName(surgeryNameJTextField.getText());
                    surgeryProcedure.setDescription(descriptionJTextArea.getText());
                    iorg.getSurgeryProcedureDirectory().getListOfSurgeries().add(surgeryProcedure);
                    JOptionPane.showMessageDialog(null, "Surgey Procedure successfully added.");
                } else {
                    JOptionPane.showMessageDialog(null, "Surgery already exists");
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select atleast one room or device to add the Surgery Procedure to the system.");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Enter Surgery Name.");
            return;

        }


    }//GEN-LAST:event_addJButtonActionPerformed

    private void backjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton2ActionPerformed
        // TODO add your handling code here:
        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);
    }//GEN-LAST:event_backjButton2ActionPerformed

    private void viewSurgeriesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSurgeriesJButtonActionPerformed
        ViewSurgeryProceduresJPanel vspjp = new ViewSurgeryProceduresJPanel(upc, iorg.getSurgeryProcedureDirectory());
        upc.add("viewsurgeryprocedures", vspjp);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.next(upc);
    }//GEN-LAST:event_viewSurgeriesJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton backjButton2;
    private javax.swing.JTextArea descriptionJTextArea;
    private javax.swing.JPanel devicesJPanel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel roomsJPanel;
    private javax.swing.JTextField surgeryNameJTextField;
    private javax.swing.JButton viewSurgeriesJButton;
    // End of variables declaration//GEN-END:variables
}
