/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdminWorkArea;

import Business.Enterprise.Enterprise;
import Business.Enterprise.InventoryEnterprise;
import Business.Enterprise.SupplierEnterprise;
import Business.Inventory.Warehouse;
import Business.Inventory.WarehouseDirectory;
import Business.Network.Network;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.InventoryOrganization;
import Business.Organization.Organization;
import Business.Organization.SupplierOrganization;
import Business.Supplier.SDeviceType;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aastha
 */
public class OrderDevicesJPanel extends javax.swing.JPanel {

    JPanel upc;
    Network network;
    SupplierEnterprise supplierEnt;
    WarehouseDirectory wd;
    Order order;
    UserAccount adminAccount;
    SupplierOrganization supporg;

    /**
     * Creates new form OrderDevicesJPanel
     */
    public OrderDevicesJPanel(JPanel upc, Network network, UserAccount adminAccount) {
        initComponents();
        this.upc = upc;
        this.network = network;
        this.adminAccount = adminAccount;
        supporg = new SupplierOrganization();
        supplierJComboBox.removeAllItems();
        populateComboBox();
        populateWarehouseComboBox();

    }

    public void populateComboBox() {
        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (e instanceof SupplierEnterprise) {
                supplierEnt = (SupplierEnterprise) e;
                for (Organization sorg : e.getOrganizationDirectory().getOrganizationList()) {
                    SupplierOrganization tempsorg = (SupplierOrganization) sorg;
                    if (tempsorg.getS().getApprovalStatus().equals("Approve")) {
                        supplierJComboBox.addItem(tempsorg);
                    }
                }
                populateProdDetailsTable();
            }
        }

    }

    public void populateProdDetailsTable() {
        DefaultTableModel dtm = (DefaultTableModel) productDetailsJTable.getModel();
        dtm.setRowCount(0);

        SupplierOrganization sorg = (SupplierOrganization) supplierJComboBox.getSelectedItem();

        if (sorg == null) {
            return;
        }

        for (SDeviceType type : sorg.getS().getProductCatalog().getSupplierCatalog()) {
            Object[] row = new Object[5];
            row[0] = type;
            row[1] = type.getModelNumber();
            row[2] = type.getCost();
            row[3] = type.getDeviceDescription();
            row[4] = type.getMaintenanceProcedureDescription();

            dtm.addRow(row);
        }
    }

    private void populateOrderTable(Order order) {
        DefaultTableModel dtm = (DefaultTableModel) orderTable.getModel();
        dtm.setRowCount(0);

        for (OrderItem oi : order.getListOfItemsOrdered()) {
            Object[] obj = new Object[4];
            obj[0] = oi;
            obj[1] = oi.getProduct().getCost();
            obj[2] = oi.getQuantity();
            obj[3] = oi.getQuantity() * oi.getProduct().getCost();
            dtm.addRow(obj);
        }
    }

    public void populateWarehouseComboBox() {
        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (e instanceof InventoryEnterprise) {
                InventoryEnterprise inventoryEnt = (InventoryEnterprise) e;

                for (Organization org : inventoryEnt.getOrganizationDirectory().getOrganizationList()) {
                    if (org instanceof InventoryOrganization) {
                        InventoryOrganization iorg = (InventoryOrganization) org;
                        wd = iorg.getWarehouseDirectory();
                        for (Warehouse w : wd.getWarehouseList()) {
                            warehouseJComboBox.addItem(w);
                        }
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewProdJButton = new javax.swing.JButton();
        addToCartJButton = new javax.swing.JButton();
        quantJSpinner = new javax.swing.JSpinner();
        quantityJLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        supplierJComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        productDetailsJTable = new javax.swing.JTable();
        selectSupplierJLabel = new javax.swing.JLabel();
        removeItemJButton = new javax.swing.JButton();
        checkOutJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        viewOrderHistoryJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        warehouseJComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        viewProdJButton.setText("View Product Details");
        viewProdJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProdJButtonActionPerformed(evt);
            }
        });
        add(viewProdJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, -1));

        addToCartJButton.setText("Add To Cart");
        addToCartJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartJButtonActionPerformed(evt);
            }
        });
        add(addToCartJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 240, -1, -1));
        add(quantJSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 240, 70, -1));

        quantityJLabel.setText("Quantity");
        add(quantityJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 240, -1, -1));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Price", "Quantity", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, 1150, 97));

        supplierJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierJComboBoxActionPerformed(evt);
            }
        });
        add(supplierJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 200, -1));

        productDetailsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ProductName", "Model No.", "Product Price", "Device Description", "Maintenance Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productDetailsJTable);
        if (productDetailsJTable.getColumnModel().getColumnCount() > 0) {
            productDetailsJTable.getColumnModel().getColumn(0).setResizable(false);
            productDetailsJTable.getColumnModel().getColumn(1).setResizable(false);
            productDetailsJTable.getColumnModel().getColumn(2).setResizable(false);
            productDetailsJTable.getColumnModel().getColumn(3).setResizable(false);
            productDetailsJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 1150, 96));

        selectSupplierJLabel.setText("Select a Supplier from the list:");
        add(selectSupplierJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        removeItemJButton.setText("Remove Item");
        removeItemJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemJButtonActionPerformed(evt);
            }
        });
        add(removeItemJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 390, -1, -1));

        checkOutJButton.setText("CheckOut>>");
        checkOutJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutJButtonActionPerformed(evt);
            }
        });
        add(checkOutJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 470, -1, -1));

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, -1, -1));

        viewOrderHistoryJButton.setText("View Order History>>");
        viewOrderHistoryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderHistoryJButtonActionPerformed(evt);
            }
        });
        add(viewOrderHistoryJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 50, -1, -1));

        jLabel1.setText("Select which Warehouse you want to ship the order to:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 470, -1, -1));

        add(warehouseJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 470, 160, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Order New Devices");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, -1, -1));

        jLabel3.setText("(Order can be placed for only one supplier at a time)");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void viewProdJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProdJButtonActionPerformed

        int selectedRow = productDetailsJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }
        SDeviceType sdt = (SDeviceType) productDetailsJTable.getValueAt(selectedRow, 0);
        ViewProductDetailsJPanel vpdjp = new ViewProductDetailsJPanel(upc, sdt);
        upc.add("ViewProductDetailsJPanel", vpdjp);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.next(upc);
    }//GEN-LAST:event_viewProdJButtonActionPerformed

    private void addToCartJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartJButtonActionPerformed

        int selectedRow = productDetailsJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }
        SDeviceType product = (SDeviceType) productDetailsJTable.getValueAt(selectedRow, 0);

        int quant = (Integer) quantJSpinner.getValue();

        boolean flag = true;
        if (order == null) {
            order = new Order();
        } else {

            ArrayList<OrderItem> oi = order.getListOfItemsOrdered();
            for (OrderItem o : oi) {
                if (o.getProduct().equals(product)) {
                    int oldQuant = o.getQuantity();
                    int newQuant = oldQuant + quant;            //if more quantity of the same product is added again.
                    o.setQuantity(newQuant);
                    flag = false;
                }

            }

        }
        if (flag == true) {
            order.addOrderItem(product, quant);
        }

        JOptionPane.showMessageDialog(null, product.getTypeOfDevice() + " " + "Quantity " + quant + " is added to cart.");
        populateProdDetailsTable();
        populateOrderTable(order);

    }//GEN-LAST:event_addToCartJButtonActionPerformed

    private void supplierJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierJComboBoxActionPerformed
        populateProdDetailsTable();
    }//GEN-LAST:event_supplierJComboBoxActionPerformed

    private void removeItemJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemJButtonActionPerformed

        int selectedRow = orderTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove this item?", "Warning", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            OrderItem oi = (OrderItem) orderTable.getValueAt(selectedRow, 0);
            order.removeOrderItem(oi);
            populateProdDetailsTable();
            populateOrderTable(order);
        }
    }//GEN-LAST:event_removeItemJButtonActionPerformed

    private void checkOutJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutJButtonActionPerformed
        SupplierOrganization org = (SupplierOrganization) supplierJComboBox.getSelectedItem();
        Warehouse w = (Warehouse) warehouseJComboBox.getSelectedItem();
        if (order != null) {
            PaymentJPanel pjp = new PaymentJPanel(upc, order, adminAccount, org, w, network);
            upc.add("PaymentJPanel", pjp);
            CardLayout layout = (CardLayout) upc.getLayout();
            layout.next(upc);
        } else {
            JOptionPane.showMessageDialog(null, "Please add items to cart first.");
            return;
        }
    }//GEN-LAST:event_checkOutJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);

    }//GEN-LAST:event_backJButtonActionPerformed

    private void viewOrderHistoryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderHistoryJButtonActionPerformed

        ViewOrderHistoryJPanel vohjp = new ViewOrderHistoryJPanel(upc, network.getMoc());
        upc.add("ViewOrderHistoryJPanel", vohjp);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.next(upc);
    }//GEN-LAST:event_viewOrderHistoryJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton checkOutJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productDetailsJTable;
    private javax.swing.JSpinner quantJSpinner;
    private javax.swing.JLabel quantityJLabel;
    private javax.swing.JButton removeItemJButton;
    private javax.swing.JLabel selectSupplierJLabel;
    private javax.swing.JComboBox supplierJComboBox;
    private javax.swing.JButton viewOrderHistoryJButton;
    private javax.swing.JButton viewProdJButton;
    private javax.swing.JComboBox warehouseJComboBox;
    // End of variables declaration//GEN-END:variables
}
