/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.MaintenanceStaff;

import Business.Employee.MaintenanceEmployee;
import Business.Inventory.DeviceMaintenance;
import Business.Inventory.IDevice;
import Business.Inventory.InventoryCatalog;
import Business.Inventory.MaintenanceSchedule;
import Business.Network.Network;
import Business.Organization.InventoryOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aastha
 */
public class RegularMaintenanceJPanel extends javax.swing.JPanel {

    JPanel upc;
    UserAccount ua;
    Organization morg;
    Network network;
    InventoryCatalog iCatalog;
    InventoryOrganization iOrg;
    MaintenanceSchedule mSchedule;

    /**
     * Creates new form MaintenanceEmployeeWorkAreaJPanel
     */
    public RegularMaintenanceJPanel(JPanel upc, MaintenanceSchedule mSchedule, UserAccount ua) {
        initComponents();
        this.upc = upc;
        this.mSchedule = mSchedule;
        this.ua = ua;

        populateTable();

    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) maintenanceJTable.getModel();
        dtm.setRowCount(0);
        Object[] row = new Object[6];
        for (DeviceMaintenance dm : mSchedule.getmSchedule()) {
            row[0] = dm.getDevice();
            row[1] = dm.getDevice().getDeviceDetails().getTypeOfDevice();
            row[2] = dm.getMaintenanceDueDate();
            row[3] = dm.getMaintenanceProcedureDescription();
            row[4] = dm.getMemp();
            if (dm.getDevice().isMaintenanceDue() == true && (!dm.getDevice().getMaintenanceDetails().getMaintenanceStatus().equals("Maintenance in progress"))) {
                dm.setMaintenanceStatus("Maintenance Due");
            }
            row[5] = dm;

            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        maintenanceSchedule1 = new Business.Inventory.MaintenanceSchedule();
        jScrollPane1 = new javax.swing.JScrollPane();
        maintenanceJTable = new javax.swing.JTable();
        processJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        completeJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        viewMaintenanceHistoryJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        maintenanceJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DeviceID", "Device Type", "Due Date", "Maintenance Description", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(maintenanceJTable);
        if (maintenanceJTable.getColumnModel().getColumnCount() > 0) {
            maintenanceJTable.getColumnModel().getColumn(0).setResizable(false);
            maintenanceJTable.getColumnModel().getColumn(1).setResizable(false);
            maintenanceJTable.getColumnModel().getColumn(2).setResizable(false);
            maintenanceJTable.getColumnModel().getColumn(3).setResizable(false);
            maintenanceJTable.getColumnModel().getColumn(4).setResizable(false);
            maintenanceJTable.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 51, 980, 398));

        processJButton.setText("2. Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 470, -1, -1));

        assignJButton.setText("1. Assign To me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 470, -1, -1));

        completeJButton.setText("3. Completed");
        completeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeJButtonActionPerformed(evt);
            }
        });
        add(completeJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 470, -1, -1));

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 510, -1, -1));

        viewMaintenanceHistoryJButton.setText("View Maintenance History>>");
        viewMaintenanceHistoryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMaintenanceHistoryJButtonActionPerformed(evt);
            }
        });
        add(viewMaintenanceHistoryJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        int selectedRow = maintenanceJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }
        IDevice d = (IDevice) maintenanceJTable.getValueAt(selectedRow, 0);
        if (d.getMaintenanceDetails().getMemp() != null) {
            d.getMaintenanceDetails().setMaintenanceStatus("Maintenance in progress");
            populateTable();
        } else {
            JOptionPane.showMessageDialog(null, "Please assign the task first.");
            return;
        }
    }//GEN-LAST:event_processJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        int selectedRow = maintenanceJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }
        IDevice d = (IDevice) maintenanceJTable.getValueAt(selectedRow, 0);
        d.getMaintenanceDetails().setMemp((MaintenanceEmployee) ua.getEmployee());
        populateTable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void completeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeJButtonActionPerformed
        int selectedRow = maintenanceJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }
        DeviceMaintenance dm = (DeviceMaintenance) maintenanceJTable.getValueAt(selectedRow, 5);

        if (dm.getMemp() != null && dm.getMaintenanceStatus().equals("Maintenance in progress")) {
            dm.setMaintenanceStatus("Maintenance Up to Date");
            dm.getDevice().updateMaintenanceDueDate();
            IDevice id = dm.getDevice();
            MaintenanceEmployee m = new MaintenanceEmployee();
            m.setFirstName("");
            m.setLastName("");
            dm.setMemp(m);
            mSchedule.getmSchedule().remove(dm);
            populateTable();

            MaintenanceNotesJPanel mnjp = new MaintenanceNotesJPanel(upc, id.getMaintenanceDetails(), (MaintenanceEmployee) ua.getEmployee());
            upc.add("maintenanceNotes", mnjp);
            CardLayout layout = (CardLayout) upc.getLayout();
            layout.next(upc);

        } else {
            JOptionPane.showMessageDialog(null, "Please assign and process the task first.");
            return;
        }
    }//GEN-LAST:event_completeJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void viewMaintenanceHistoryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMaintenanceHistoryJButtonActionPerformed
        int selectedRow = maintenanceJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }
        DeviceMaintenance d = (DeviceMaintenance) maintenanceJTable.getValueAt(selectedRow, 5);

        MaintenanceHistoryJPanel mnjp = new MaintenanceHistoryJPanel(upc, d);
        upc.add("maintenanceNotes", mnjp);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.next(upc);
    }//GEN-LAST:event_viewMaintenanceHistoryJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton completeJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable maintenanceJTable;
    private Business.Inventory.MaintenanceSchedule maintenanceSchedule1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton viewMaintenanceHistoryJButton;
    // End of variables declaration//GEN-END:variables
}
